<project xmlns="http://maven.apache.org/POM/4.0.0" 
	 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
			     http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <!--
      We have native libraries (JNI/C) bundled into our artifact but,
      due to the composition of our Makefiles (see e.g.
      src/main/native/Linux/Makefile) and the 'native-lib-loader'
      artifact we use to load native stuff, we appear to be pure Java.
      Cool or what!
  -->

  <groupId>edu.uw.apl.commons</groupId>
  <artifactId>device-files</artifactId>
  <version>1.0.0</version>
  <packaging>jar</packaging>
  <name>
    Device Files: Derive VendorInfo, Serial Number, Size of e.g. /dev/sda
  </name>

  <repositories>
    <!-- 
	 To locate our dependent artifacts which are not (yet) available at
	 Maven Central, we bundle them into this project-local repo.
	 Alternatively, user could grab sources from github, see
	 https://github.com/uw-dims/java-native-loader.git
    -->
    <repository>
      <id>device-files.local</id>
      <name>device-files</name>
      <url>file:${project.basedir}/.repository</url>
      <releases>
	<updatePolicy>always</updatePolicy>
      </releases>
    </repository>
  </repositories>

  <dependencies>
    <dependency>
      <groupId>edu.uw.apl.commons</groupId>
      <artifactId>native-lib-loader</artifactId>
      <version>2.1.0</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.2</version>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <profiles>
    <!-- Canonicalise all 32-bit arch names to 'x86' -->
    <profile>
      <id>x86</id>
      <activation>
	<os>
	  <arch>x86</arch>
	</os>
      </activation>
      <properties>
	<arch>x86</arch>
      </properties>
    </profile>
    <profile>
      <id>i386</id>
      <activation>
	<os>
	  <arch>i386</arch>
	</os>
      </activation>
      <properties>
	<arch>x86</arch>
      </properties>
    </profile>

    <!-- Canonicalise all 64-bit arch names to 'x86_64' -->
    <profile>
      <id>x86_64</id>
      <activation>
	<os>
	  <arch>x86_64</arch>
	</os>
      </activation>
      <properties>
	<arch>x86_64</arch>
      </properties>
    </profile>
    <profile>
      <id>amd64</id>
      <activation>
	<os>
	  <arch>amd64</arch>
	</os>
      </activation>
      <properties>
	<arch>x86_64</arch>
      </properties>
    </profile>
    <!--
	The previous profile sets, to canonicalise arch names to that string
	understood by java-native-loader, would be needed in ANY project
	that uses java-native-loader, so might go in settings.xml ??
    -->

    <profile>
      <id>tester</id>
      <properties>
	<skipTests>false</skipTests>
      </properties>
    </profile>
    <profile>
      <id>windows-make</id>
      <activation>
	<os>
	  <family>Windows</family>
	</os>
      </activation>
      <properties>
	<make>nmake</make>
      </properties>
    </profile>
    <profile>
      <id>unix-make</id>
      <activation>
	<os>
	  <family>Linux</family>
	</os>
      </activation>
      <properties>
	<make>make</make>
      </properties>
    </profile>
    <profile>
      <id>mac-make</id>
      <activation>
	<os>
	  <family>Mac</family>
	</os>
      </activation>
      <properties>
	<make>make</make>
      </properties>
    </profile>
    
    <!--
	We only try to build/package the native (jni) code if we are a
	'power' user: mvn -Pnative.  Once done, we then 'git add' the
	resultant .so/.dll/.dylib sitting under src/main/resources.  Then
	'regular' users see this lib as just a resource to bundle into
	the runtime jar.
    -->
      <profile>
	<id>native</id>
	<build>
	  <plugins>
	    <plugin>
	      <groupId>org.codehaus.mojo</groupId>
	      <artifactId>native-maven-plugin</artifactId>
	      <executions>
		<execution>
		  <id>javah</id>
		  <phase>compile</phase>
		  <configuration>
		    <javahClassNames>
		      <javahClassName>
			edu.uw.apl.commons.devicefiles.DeviceFile
		      </javahClassName>
		    </javahClassNames>
		  </configuration>
		  <goals>
		    <goal>javah</goal>
		  </goals>
		</execution>
	      </executions>
	    </plugin>
	    <plugin>
	      <groupId>org.codehaus.mojo</groupId>
	      <artifactId>exec-maven-plugin</artifactId>
	      <version>1.1</version>
	      <executions>
		<execution>
		  <id>build.native</id>
		  <phase>compile</phase>
		  <goals>
		    <goal>exec</goal>
		  </goals>
		  <configuration>
		    <workingDirectory>
		      src/main/native/${os.name}/${arch}
		    </workingDirectory>
		    <executable>${make}</executable>
		    <commandlineArgs>install</commandlineArgs>
		    <environmentVariables>
		      <ARCH>${arch}</ARCH>
		      <!-- LOOK: Is this valid, using .. ? -->
		      <JDK_HOME>${java.home}/..</JDK_HOME>
		      <PREFIX>edu.uw.apl.commons.devicefiles</PREFIX>
		      <LIBNAME>device-files</LIBNAME>
		    </environmentVariables>
		  </configuration>
		</execution>
		
		<execution>
		  <id>clean.native</id>
		  <phase>clean</phase>
		  <goals>
		    <goal>exec</goal>
		  </goals>
		  <configuration>
		    <workingDirectory>
		      src/main/native/${os.name}/$arch}
		    </workingDirectory>
		    <executable>${make}</executable>
		    <commandlineArgs>clean</commandlineArgs>
		    <environmentVariables>
		      <ARCH>${arch}</ARCH>
		      <!-- LOOK: Is this valid, using .. ? -->
		      <JDK_HOME>${java.home}/..</JDK_HOME>
		      <PREFIX>edu.uw.apl.commons.devicefiles</PREFIX>
		      <LIBNAME>device-files</LIBNAME>
		    </environmentVariables>
		  </configuration>
		</execution>
	      </executions>
	    </plugin>
	  </plugins>
	</build>
      </profile>
    </profiles>

    <build>
      <defaultGoal>compile</defaultGoal>
      <plugins>

	<plugin>
	  <artifactId>maven-compiler-plugin</artifactId>
	  <version>3.3</version>
	</plugin>

	<plugin>
	  <artifactId>maven-surefire-plugin</artifactId>
	  <version>2.18.1</version>
	  <configuration>
	  </configuration>
	</plugin>

	<plugin>
	  <artifactId>maven-jar-plugin</artifactId>
	  <configuration>
	    <archive>
	      <manifest>
		<addDefaultImplementationEntries>
		  true
		</addDefaultImplementationEntries>
		<addDefaultSpecificationEntries>
		  true
		</addDefaultSpecificationEntries>
	      </manifest>
	    </archive>
	  </configuration>
	</plugin>
      </plugins>
    </build>

</project>
